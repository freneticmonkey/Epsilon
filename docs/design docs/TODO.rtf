{\rtf1\ansi\ansicpg1252\cocoartf1187
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16600\viewh15020\viewkind0
\deftab720
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural

\f0\b\fs24 \cf0 Epsilon Dev Notes\
\
18/09/2012\
Ok.\
- Planet relative camera movement\
- Better planetary terrain handling\
- Writing noise to textures.\
\
\
15/09/2012\
NOTE: Texture loading is currently pyglet only.  Need to implement a check for pyglet settings and only use this code if pyglet is active\
\
\
3/08/2012\
Need to fix the mouse movement so that the mouse is reset to the centre of the screen on first click before any rotation is applied to the camera.  This way the camera won't go flying off on a weird rotation when the click isn't near the centre of the screen.\
\
Pypy - Pyglet\
If Pyglet will only work under Pypy then I need to remove the bumpy dependency when setting up Vertex Buffer Objects.  Possibly switch to Numarray instead.  But I don't know if that works under Pypy.  I am NOT going to stuff around digging into the guts of Pyglet to determine why the window isn't displaying with the default Python under OSX 10.8.\
\
\
\
31/07/2012\
TODO: Bounds - Doesn't currently handle transformations.  For example, won't handle rotated bounding boxes. Thinking about it I've basically implemented axis aligned bounding boxes.  But without scale support.c \
\
\
30/7/2012 -\
Ok! \
Re-implemented textures into the engine.  Default phong shader now supports having a texture set.\
Got the planetary detail refinement working correctly.\
Performance is not great, so need to finish the implementation of camera frustums.  Which means I need to implement a cull pass which will trim out all invisible geometry!\
\
6/7/2012 - \
Broke up the Node class as it was becoming quite unmanageable.  The transform and child functionality is now stored within the transform class.  The rendering is now stored within the Renderer class.  The Renderer can be overridden if custom rendering functionality is needed.  This is demonstrated in the Planet code within the SphereQuad class which uses the SphereQuadRenderer\
\
2/7/2012\
BUG: Transform tag has no effect when a child of a Light tag\
\
2/7/2012
\b0 \
Spent a lot of time implementing a quad tree planet renderer using the Sandbox project as a template/guide.  Working ok, but for the camera being incorrectly transformed into planet space resulting in in correct splitting.
\b \
\
1/05/2012\

\b0 Thinking again about things that need to be done:\
\
- UI\
 - Switched to Simpleui, but the UI is very simple.. haha no console implementation.\
 - Editing\
\
- Scene\
 - Exporter\
 - Better import for scripts.  Rather than Hardcoding TestScripts in the ResourceLoader, be able to instantiate\
   scripts from a source file specified by the XML scene description.\
\
- Scripting\
 - In engine script editor with live editing.\
 - Requires basic text editor functions.\
\
- Renderer\
 - Frustrum culling.\
 - Render stages\
  - i.e. Background, Scene, Shadows, PostProcessing, Overlays (inc ui)\
\
- Audio\
 - Something\'85\
\
- Physics.
\b \
 
\b0 - PyBullet? PyODE? which? how hard?\
\
- Networking\
 - See if the Verse code is going to get anywhere soon.
\b \
\
26/05/2012\

\b0 Ended up spending most of today reshuffling the epsilon code around so that it is better organised.  All of the main areas are now organised underneath an epsilon folder and all internal imports now import from epsilon.<package>.<module>.\
\
Implemented some code for an initial procedural terrain, but it's way too slow in calculating normals.  From what I've read around the net calculating normals on the CPU is a bad idea, even when using C++, it's better to calculate them in a shader.  Doing it in a shader involves writing the generated height map to a texture and sampling the texture to generate the normals for each vertex.
\b \
\
25/05/2012\

\b0 Finished UI swap to Simplui.  Need to port over the console code and implement a logger output UI.\
Ok. Well simplui is simple.  If I want to make a console dialog I need to start from basics.  Simplui doesn't even have a textedit class.  I can't say I'm in the mood for that at the moment, so I'm just going to move on to something more interesting.\
\
I think the next interesting thing would be to look at some procedural terrain. :)
\b \
\
22/05/2012
\b0 \
\
Haven't had a great deal of time to work on Epsilon. With the move, work, other work, etc :(\
\
I've changed pretty much all the code to use python naming conventions.  Removed all CamelCase names\
\
Implemented a layer onto which pyglet and pygame sit.  This has been pretty boring, but educational all the same I believe.\
The engine is now a little more structured than before which is probably for the best.\
\
Next up:\
Check in latest changes and sync up to github\
Re-integrate UIManager using Simplui instead.
\b \
\
14/4/2012\

\b0 UI Changes\
- Change the Renderer from PyGame to Pyglet.  Pyglet is more frequently developed and appears to have much cleaner code in general.  This would also be a good time to make the Camel Case API changes.\
- Use Simplui for the GUI.\
\
Render Changes\
- Frustrum Culling.\
\
Audio\
- Implement.\
\
General Changes\
- Implement Livecoding\
  Class Refactoring\
- Continue to refine the class structures to logically group functionality - ~Done 1/6/2012\
- This could also be put below, but move all rendering code within the Renderer. - Kinda, sorta done.\

\b \

\b0 Later\
- After the UI is in. Implement scene editing! :D\
- Physics.\
  - ODE\
  - \
- In engine python editing using Python highlighting via: Pygments\
- Engine optimisations and speedups using shedskin.\
- Particles\

\b \
\
\
21/3/2012\

\b0 ShaderTree\
- 
\b \
\

\b0 Immediate Goals\
- Check in latest changes - Done!\
- Swap existing Phong Renderer for a simpler model that actually uses a varying distance variable for proper attenuation - Done\
\
Near-term goals\
- Clean up code.  Refactor classes somewhat. \
	- This has been started.\
	- All existing code has to have it's functions switched from CamelCase to python PEP standard. e.g.\
		AddChild() to add_child()\
\
- All Rendering code should go with the Renderer Object.\
	- Scene Manager organisation.  Finds default/only camera. -Done\
	- Performs basic frustum culling. <---- Still needs to be done\
	- Make Objects easier to create.  Node or Mesh can be easily inherited from to generate new meshes. <-- Still needs to be done\
\
\
- Create GUI, Console, debugging tools.\
	- GUI code could be boring.  Maybe just some button objects initially? <-- integrated PyUI, clunky but better than writing a bunch of UI code\
	- Console - Embedding interactive python console with access to the scene <-- Done\
	- Auto-reload if a source file changes.  Like the Django dev server\
\
- Start working towards developing the AI Sim system the engine was originally developed for.\
	- Integrate Physics to aid with Ai calculations\
	\
\
Complicated Problems that aren't particularly fun to solve\
---\
	- Shadows? - This is pretty complicated and requires a restructuring of the Render class to get it to work correctly.  While this restructuring is occurring I could look at developing engine 'stages' whereby pre and post processing could be implemented.\
\
- Integrate pyODE.\
\
Long Term\
- Networking, Verse Integration\
- Basic Scene Editing functionality\
	- Define Scene format. XML? Write a loader. - Done\
	- Model Importer, FBX, Collada or Obj.  - Obj Done.\
	- Create a scene editor. Write an exporter!\
- 3D UI. Change the UI and Renderer implementation to have 'Overlays' a'la Ogre3D and enable the UI to be drawn on planes which \
  can be positioned in 3D space.\
\
- AI framework. Look at Recast and Detour for pathing libraries.\
\
Nice to have\
\
\
KH67*$kl\
}